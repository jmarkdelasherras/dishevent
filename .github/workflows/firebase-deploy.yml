name: DisheEvent CI/CD Pipeline

on:
  push:
    branches: [ master, main, dev ]
  pull_request:
    types: [ closed ]
    branches: [ master, main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests
        run: npm test || echo "No tests specified"
        
  build-and-deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      # Determine environment based on branch
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_OUTPUT
            echo "CONFIG_FILE=firebase.dev.json" >> $GITHUB_OUTPUT
            echo "APP_HOSTING_FILE=apphosting.dev.yaml" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
            echo "CONFIG_FILE=firebase.prod.json" >> $GITHUB_OUTPUT
            echo "APP_HOSTING_FILE=apphosting.prod.yaml" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            if [[ "${{ github.event.inputs.environment }}" == "development" ]]; then
              echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
              echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_OUTPUT
              echo "CONFIG_FILE=firebase.dev.json" >> $GITHUB_OUTPUT
              echo "APP_HOSTING_FILE=apphosting.dev.yaml" >> $GITHUB_OUTPUT
            else
              echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
              echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
              echo "CONFIG_FILE=firebase.prod.json" >> $GITHUB_OUTPUT
              echo "APP_HOSTING_FILE=apphosting.prod.yaml" >> $GITHUB_OUTPUT
            fi
          fi
      
      # Create environment-specific .env file for build
      - name: Create environment file for build
        run: |
          if [[ "${{ steps.set-env.outputs.ENVIRONMENT }}" == "development" ]]; then
            echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}" >> .env.local
            echo "NEXT_PUBLIC_APP_ENV=development" >> .env.local
          else
            echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY_PROD }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN_PROD }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID_PROD }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET_PROD }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID_PROD }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID_PROD }}" >> .env.local
            echo "NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID_PROD }}" >> .env.local
            echo "NEXT_PUBLIC_APP_ENV=production" >> .env.local
          fi
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PHASE: phase-production-build
          SKIP_FIREBASE_INIT: "true"
          NODE_OPTIONS: "--max_old_space_size=4096"
      
      # Set up Google Cloud and Firebase tools
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ steps.set-env.outputs.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      # Create temporary service account file for deployment
      - name: Create service account file
        run: |
          if [[ "${{ steps.set-env.outputs.ENVIRONMENT }}" == "development" ]]; then
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEV }}' > service-account-temp.json
          else
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}' > service-account-temp.json
          fi

      # Copy the appropriate configuration files
      - name: Prepare deployment files
        run: |
          cp ${{ steps.set-env.outputs.CONFIG_FILE }} firebase.json
          cp ${{ steps.set-env.outputs.APP_HOSTING_FILE }} apphosting.yaml
      
      # Deploy to Firebase App Hosting
      - name: Deploy to Firebase App Hosting
        run: firebase deploy --only apphosting --project ${{ steps.set-env.outputs.FIREBASE_PROJECT_ID }} --non-interactive
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GOOGLE_APPLICATION_CREDENTIALS: ./service-account-temp.json
      
      # Cleanup sensitive files
      - name: Clean up sensitive files
        run: |
          rm -f service-account-temp.json
          rm -f .env.local
          rm -f .env.development
          rm -f .env.production
          rm -f .env.development.local
          rm -f .env.production.local
          rm -f formatted-*.txt